{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "UmbracoDeploySchema",
  "type": "object",
  "properties": {
    "Umbraco": {
      "$ref": "#/definitions/UmbracoDefinition"
    }
  },
  "definitions": {
    "UmbracoDefinition": {
      "type": "object",
      "description": "Configuration container for all Umbraco products.",
      "properties": {
        "Deploy": {
          "$ref": "#/definitions/UmbracoDeployDefinition"
        }
      }
    },
    "UmbracoDeployDefinition": {
      "type": "object",
      "description": "Configuration of Umbraco Deploy.",
      "properties": {
        "Settings": {
          "$ref": "#/definitions/DeploySettings"
        },
        "Project": {
          "$ref": "#/definitions/DeployProjectConfig"
        },
        "Debug": {
          "$ref": "#/definitions/DebugSettings"
        }
      }
    },
    "DeploySettings": {
      "type": "object",
      "properties": {
        "ApiKey": {
          "type": "string",
          "description": "Gets or sets the API key.",
          "x-deprecated": true,
          "x-deprecatedMessage": "Set the ApiSecret to a cryptographically random value of 64 bytes instead for improved security."
        },
        "ApiSecret": {
          "type": "string",
          "description": "Gets or sets the API secret.",
          "format": "byte"
        },
        "ExcludedEntityTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RelationTypes": {
          "type": "array",
          "description": "Gets or sets a list of relation types with details on how they should be treated in Deploy operations.",
          "items": {
            "$ref": "#/definitions/RelationTypeSetting"
          }
        },
        "ValueConnectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValueConnectorSetting"
          }
        },
        "Edition": {
          "$ref": "#/definitions/Edition"
        },
        "Kabum": {
          "type": "string"
        },
        "SessionTimeout": {
          "type": "string",
          "format": "duration"
        },
        "SourceDeployTimeout": {
          "type": "string",
          "format": "duration"
        },
        "DatabaseCommandTimeout": {
          "type": "string",
          "format": "duration"
        },
        "EnableSignatureCacheReads": {
          "type": "boolean"
        },
        "HttpClientTimeout": {
          "type": "string",
          "format": "duration"
        },
        "DiskOperationsTimeout": {
          "type": "string",
          "format": "duration"
        },
        "IgnoreBrokenDependenciesBehavior": {
          "description": "Gets or sets a value indicating for which operations dependencies are ignored.",
          "oneOf": [
            {
              "$ref": "#/definitions/IgnoreBrokenDependenciesBehavior"
            }
          ]
        },
        "TransferFormsAsContent": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether forms should be transferred as content via the back-office (or, if false, as schema via .uda files)."
        },
        "TransferDictionaryAsContent": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether dictionary items should be transferred as content via the back-office (or, if false, as schema via .uda files)."
        },
        "IgnoreMissingLanguagesForDictionaryItems": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether missing languages in dictionary items trigger a schema mismatch error."
        },
        "AllowMembersDeploymentOperations": {
          "description": "Gets or sets a value indicating which operations are supported for members.",
          "oneOf": [
            {
              "$ref": "#/definitions/MembersDeploymentOperations"
            }
          ]
        },
        "TransferMemberGroupsAsContent": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether member group should be transferred as content via the back-office (or, if false, as schema via .uda files)."
        },
        "AcceptInvalidCertificates": {
          "type": "boolean"
        },
        "ExportMemberGroups": {
          "type": "boolean",
          "description": "Use this to disable export of member groups to disk.\nCan be used to prevent issues when using externally stored member groups not managed by Umbraco."
        },
        "AllowDomainsDeploymentOperations": {
          "$ref": "#/definitions/DomainsDeploymentOperations"
        },
        "AllowPublicAccessDeploymentOperations": {
          "description": "Gets a value indicating the public access rules to include in deployments.",
          "oneOf": [
            {
              "$ref": "#/definitions/PublicAccessEntryDeploymentOperations"
            }
          ]
        },
        "TrashedContentDeploymentOperations": {
          "description": "Gets or sets a value indicating options for including trashed content in an export and processing during import.",
          "oneOf": [
            {
              "$ref": "#/definitions/TrashedContentDeploymentOperations"
            }
          ]
        },
        "ReloadMemoryCacheFollowingDiskReadOperation": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether to trigger a reload of the memory cache following\nan extraction of schema from .uda files to update the Umbraco installation."
        },
        "PreferLocalDbConnectionString": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether to prefer automatically initializing a LocalDB connection string (if not explicitly set and LocalDB is available)."
        },
        "UseDatabaseTransferQueue": {
          "type": "boolean"
        },
        "SourceDeployBatchSize": {
          "type": [
            "integer",
            "null"
          ],
          "description": "Gets or sets a batch size for source deployments. A null value indicates no batching will take place.",
          "format": "int32",
          "maximum": 2147483647.0,
          "minimum": 1.0
        },
        "PackageBatchSize": {
          "type": [
            "integer",
            "null"
          ],
          "description": "Gets or sets a batch size for package processing deployments. A null value indicates no batching will take place.",
          "format": "int32",
          "maximum": 2147483647.0,
          "minimum": 1.0
        },
        "MediaFileChecksumCalculationMethod": {
          "description": "Gets or sets a value indicating the method to use for calculating media file checksum values.",
          "oneOf": [
            {
              "$ref": "#/definitions/MediaFileChecksumCalculationMethod"
            }
          ]
        },
        "NumberOfSignaturesToUseAllRelationCache": {
          "type": "integer",
          "description": "Gets or sets a value for the number of artifact signatures to process in a deploy operation before utilising\na cache for the full set of relations.",
          "format": "int32",
          "maximum": 2147483647.0,
          "minimum": 0.0
        },
        "ContinueOnMediaFilePathTooLongException": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether to continue or throw on media file path too long exceptions."
        },
        "SuppressCacheRefresherNotifications": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether cache refresher notifications triggered following a deployment operation are suppressed."
        },
        "HideConfigurationDetails": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether to hide the configuration details from the management dashboard."
        },
        "ResolveUserInTargetEnvironment": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether to resolve user's in the target environment for a deploy operation by email address.\nIf the email of a user in the target environment matches the email address of the user that initiated the transfer or restore\noperation, their account will be associated with the content and media updates."
        }
      }
    },
    "RelationTypeSetting": {
      "type": "object",
      "properties": {
        "Alias": {
          "type": "string"
        },
        "Mode": {
          "$ref": "#/definitions/RelationMode"
        }
      }
    },
    "RelationMode": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Exclude",
        "Weak",
        "Strong"
      ],
      "enum": [
        "Exclude",
        "Weak",
        "Strong"
      ]
    },
    "ValueConnectorSetting": {
      "type": "object",
      "properties": {
        "Alias": {
          "type": "string"
        },
        "TypeName": {
          "type": "string"
        }
      }
    },
    "Edition": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Default",
        "BackOfficeOnly"
      ],
      "enum": [
        "Default",
        "BackOfficeOnly"
      ]
    },
    "IgnoreBrokenDependenciesBehavior": {
      "type": "string",
      "description": "Specifies options for ignoring broken dependencies (instead of failing deployment when trashed or deleted dependencies are encountered).",
      "x-enumFlags": true,
      "x-enumNames": [
        "None",
        "Restore",
        "Transfer",
        "All"
      ],
      "enum": [
        "None",
        "Restore",
        "Transfer",
        "All"
      ]
    },
    "MembersDeploymentOperations": {
      "type": "string",
      "description": "Specifies options for deployment operations involving members.",
      "x-enumFlags": true,
      "x-enumNames": [
        "None",
        "Restore",
        "Transfer",
        "All"
      ],
      "enum": [
        "None",
        "Restore",
        "Transfer",
        "All"
      ]
    },
    "DomainsDeploymentOperations": {
      "type": "string",
      "description": "",
      "x-enumFlags": true,
      "x-enumNames": [
        "None",
        "Culture",
        "AbsolutePath",
        "Hostname",
        "All"
      ],
      "enum": [
        "None",
        "Culture",
        "AbsolutePath",
        "Hostname",
        "All"
      ]
    },
    "PublicAccessEntryDeploymentOperations": {
      "type": "string",
      "description": "Specifies options for handling content \"public access\" settings.",
      "x-enumFlags": true,
      "x-enumNames": [
        "None",
        "AddOrUpdate",
        "Remove",
        "All"
      ],
      "enum": [
        "None",
        "AddOrUpdate",
        "Remove",
        "All"
      ]
    },
    "TrashedContentDeploymentOperations": {
      "type": "string",
      "description": "Specifies options for handling trashed content (documents, media and members).",
      "x-enumFlags": true,
      "x-enumNames": [
        "None",
        "Export",
        "Import",
        "All"
      ],
      "enum": [
        "None",
        "Export",
        "Import",
        "All"
      ]
    },
    "MediaFileChecksumCalculationMethod": {
      "type": "string",
      "description": "Specifies options for calculating checksums for media files.",
      "x-enumNames": [
        "PartialFileContents",
        "Metadata"
      ],
      "enum": [
        "PartialFileContents",
        "Metadata"
      ]
    },
    "DeployProjectConfig": {
      "type": "object",
      "description": "The configuration of Deploy workspaces",
      "properties": {
        "CurrentWorkspaceName": {
          "type": "string",
          "description": "Gets or sets the name of the current workspace."
        },
        "Workspaces": {
          "type": "array",
          "description": "Gets or set the list of workspaces.",
          "items": {
            "$ref": "#/definitions/Workspace"
          }
        }
      }
    },
    "Workspace": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string",
          "format": "guid"
        },
        "Name": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "Url": {
          "type": "string"
        }
      }
    },
    "DebugSettings": {
      "type": "object",
      "properties": {
        "IsDebug": {
          "type": "boolean"
        },
        "IsSqlAzure": {
          "type": "boolean"
        },
        "EnvironmentId": {
          "type": "string"
        },
        "EnvironmentName": {
          "type": "string"
        },
        "IsRunningCloud": {
          "type": "boolean"
        },
        "IsRunningHosted": {
          "type": "boolean"
        },
        "PortalUrl": {
          "type": "string"
        }
      }
    }
  }
}